<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My gh-pages</title>
  <subtitle>Blog description</subtitle>
  <id>http://shinaisan.github.io</id>
  <link href="http://shinaisan.github.io"/>
  <link href="http://shinaisan.github.io/feed.xml" rel="self"/>
  <updated>2018-08-25T06:37:00Z</updated>
  <author>
    <name>M. Shiina</name>
  </author>
  <entry>
    <title>Short Example of Logstash Multiple Pipelines</title>
    <link rel="alternate" href="http://shinaisan.github.io/2018/08/25/short-example-of-logstash-multiple-pipelines.html"/>
    <id>http://shinaisan.github.io/2018/08/25/short-example-of-logstash-multiple-pipelines.html</id>
    <published>2018-08-25T06:37:00Z</published>
    <updated>2018-08-25T16:07:59+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;/p&gt;

&lt;h2 id="short-example-of-logstash-multiple-pipelines"&gt;Short Example of Logstash Multiple Pipelines&lt;/h2&gt;

&lt;p&gt;I trid out Logstash
&lt;a href="https://www.elastic.co/guide/en/logstash/6.3/multiple-pipelines.html"&gt;Multiple Pipelines&lt;/a&gt;
just for practice purpose.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://gist.github.com/shinaisan/78f3a3ad1ab50cab1d3ff32983454987"&gt;Gist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following summary assumes that
the &lt;code&gt;PATH&lt;/code&gt; contains Logstash and Filebeat executables
and they run locally on &lt;code&gt;localhost&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id="logstash-config"&gt;Logstash config&lt;/h2&gt;

&lt;h3 id="pipelinesyml"&gt;&lt;code&gt;pipelines.yml&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This file refers to two pipeline configs &lt;code&gt;pipeline1.config&lt;/code&gt; and &lt;code&gt;pipeline2.config&lt;/code&gt;.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- pipeline.id: pipeline_1
  path.config: "pipeline1.config"
- pipeline.id: pipeline_2
  path.config: "pipeline2.config"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unlike &lt;code&gt;logstash.yml&lt;/code&gt;, environment variables cannot be used in the &lt;code&gt;pipelines.yml&lt;/code&gt;
for some reason.
See &lt;a href="https://github.com/elastic/logstash/issues/8452"&gt;Issue #8452&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Each &lt;code&gt;path.config&lt;/code&gt; here specifies only a file name,
so Logstash has to be launched from the directory
where the following config files reside.&lt;/p&gt;

&lt;h3 id="pipeline1config"&gt;&lt;code&gt;pipeline1.config&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Deals with syslog line input and listens to port 5044.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;input {
    beats {
        port =&amp;gt; "5044"
    }
}
filter {
    grok {
        match =&amp;gt; { "message" =&amp;gt; "%{SYSLOGLINE}"}
    }
}
output {
    stdout { codec =&amp;gt; rubydebug }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="pipeline2config"&gt;&lt;code&gt;pipeline2.config&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Deals with Apache log input and listens to port 5045.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;input {
    beats {
        port =&amp;gt; "5045"
    }
}
filter {
    grok {
        match =&amp;gt; { "message" =&amp;gt; "%{COMBINEDAPACHELOG}"}
    }
    geoip {
        source =&amp;gt; "clientip"
    }
}
output {
    stdout { codec =&amp;gt; rubydebug }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Almost the same as the example found in
&lt;a href="https://www.elastic.co/guide/en/logstash/6.3/advanced-pipeline.html"&gt;Parsing Logs with Logstash&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="run-logstash"&gt;Run Logstash&lt;/h2&gt;

&lt;p&gt;Here we set &lt;code&gt;--path.settings&lt;/code&gt; just to let Logstash point to
our &lt;code&gt;$THIS_GIST_DIR&lt;/code&gt; to look for config files.
We have to make sure not to specify &lt;code&gt;-f&lt;/code&gt; option
because Logstash reads &lt;code&gt;pipelines.yml&lt;/code&gt; by default.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pushd $THIS_GIST_DIR
mkdir data
mkdir logs
logstash --path.settings $THIS_GIST_DIR --path.logs $THIS_GIST_DIR/logs --path.data $THIS_GIST_DIR/data
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="first-filebeat"&gt;First Filebeat&lt;/h2&gt;

&lt;p&gt;The first filebeat config is &lt;code&gt;filebeat1.yml&lt;/code&gt;
that specifies only &lt;code&gt;syslog&lt;/code&gt; in the &lt;code&gt;paths&lt;/code&gt; setting.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;filebeat.inputs:
- type: log
  paths:
    - syslog
output.logstash:
  hosts: ["localhost:5044"]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we use a copy of syslog as an input.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Works only if syslog is written in /var/log...
cp /var/log/syslog $THIS_GIST_DIR/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the previous &lt;code&gt;registry&lt;/code&gt; file of Filebeat remains, we remove it.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rm -i $THIS_GIST_DIR/data/registry
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can try Filebeat and see Logstash emits filtered output onto stdout.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pushd $THIS_GIST_DIR
mkdir data
mkdir logs
filebeat --path.home $THIS_GIST_DIR -c filebeat1.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After all the log lines are printed, we can shutdown Filebeat, e.g. by CTRL-C.&lt;/p&gt;

&lt;h2 id="second-filebeat"&gt;Second Filebeat&lt;/h2&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;filebeat.inputs:
- type: log
  paths:
    - logstash-tutorial.log
output.logstash:
  hosts: ["localhost:5045"]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the second pipeline, we download a sample Apache log file from
&lt;a href="https://download.elastic.co/demos/logstash/gettingstarted/logstash-tutorial.log.gz"&gt;logstash-tutorial.log&lt;/a&gt;
and unzip it to obtain &lt;code&gt;logstash-tutorial.log&lt;/code&gt;.
This file can also be found from
&lt;a href="https://www.elastic.co/guide/en/logstash/6.3/advanced-pipeline.html"&gt;Parsing Logs with Logstash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This time, Logstash emits parsed Apache log onto stdout.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pushd $THIS_GIST_DIR
mkdir data
mkdir logs
filebeat -path.home $THIS_GIST_DIR -c filebeat2.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="output-to-elasticsearch"&gt;Output to Elasticsearch&lt;/h2&gt;

&lt;p&gt;By replacing the output in the &lt;code&gt;pipeline{1,2}.config&lt;/code&gt; with the following one,
we can direct filtered log outputs to Elasticsearch.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;output {
    elasticsearch {
        hosts =&amp;gt; [ "localhost:9200" ]
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can issue a search query like below from the Dev Tools Console of Kibana.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET /logstash-*/_search
{
  "query": {
    "match": {
      "program.keyword": "cron"
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/logstash/6.3/multiple-pipelines.html"&gt;Multiple Pipelines&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/logstash/6.3/advanced-pipeline.html"&gt;Parsing Logs with Logstash&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/logstash/6.3/running-logstash-command-line.html"&gt;Running Logstash from the Command Line&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/logstash/6.3/plugins-outputs-elasticsearch.html"&gt;Elasticsearch output plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/beats/filebeat/6.3/command-line-options.html"&gt;Filebeat command reference&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/beats/filebeat/6.3/filebeat-input-log.html"&gt;Log input / Filebeat&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/beats/filebeat/6.3/logstash-output.html"&gt;Configure the Logstash output / Filebeat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
  <entry>
    <title>Greedy Set Cover Sample Implementation</title>
    <link rel="alternate" href="http://shinaisan.github.io/2018/08/18/greedy-set-cover-sample-implementation.html"/>
    <id>http://shinaisan.github.io/2018/08/18/greedy-set-cover-sample-implementation.html</id>
    <published>2018-08-18T05:56:00Z</published>
    <updated>2018-08-22T19:08:26+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;/p&gt;

&lt;h3 id="problem-statement"&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;Set cover problem: Given the universe \(\mathcal{U}\)
and the set \(\mathcal{S}\) of subsets of \(\mathcal{U}\),
find the collection \(\mathcal{C}\) of subsets from \(\mathcal{S}\)
that covers the universe while minimizing the total cost
where&lt;/p&gt;

&lt;div&gt;
\begin{align}
 \mathcal{U} &amp;amp;= \{ 1,2,\cdots,n \} \\
 \bigcup_{s\in\mathcal{S}} s &amp;amp;= \mathcal{U} \\
 \bigcup_{s\in\mathcal{C}} s &amp;amp;= \mathcal{U}
\end{align}
&lt;/div&gt;

&lt;p&gt;and the objective is to â€¦&lt;/p&gt;

&lt;div&gt;\[
\text{minimize}\qquad
{\sum_{s\in\mathcal{C}}\mathrm{cost}{(s)}}
\]&lt;/div&gt;

&lt;h3 id="sample-implementation"&gt;Sample Implementation&lt;/h3&gt;

&lt;script src="https://gist.github.com/shinaisan/76ee2c9a285f180ba2fc966a4e3b284c.js"&gt;&lt;/script&gt;

&lt;h3 id="input"&gt;Input&lt;/h3&gt;

&lt;p&gt;The format of the problem input for the above code is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;[the cardinality of the universe] [the number of the subsets given below]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;[cost of the subset 0] [the size of the subset 0] [the first element] ...&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;[cost of the subset 1] [the size of the subset 1] [the first element] ...&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="run"&gt;Run&lt;/h3&gt;

&lt;p&gt;The following snippet shows the usage of the &lt;code&gt;greedy_set_cover&lt;/code&gt; class.
It takes an input from an input stream and translates the input
into its internal parameters, the universe cardinality and the subsets,
according to the input format above.&lt;/p&gt;

&lt;pre class="highlight cpp"&gt;&lt;code&gt;  &lt;span class="n"&gt;greedy_set_cover&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;istringstream&lt;/span&gt; &lt;span class="n"&gt;iss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Input string in the above input format.
&lt;/span&gt;
  &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iss&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Feed the input.
&lt;/span&gt;  &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Solve the problem.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;solve&lt;/code&gt; method show the selection of subsets,
each represented with an 0-based integer, and the total cost incurred
by that selection.&lt;/p&gt;

&lt;h3 id="greedy-algorithm"&gt;Greedy Algorithm&lt;/h3&gt;

&lt;p&gt;The implementation is roughly summarized as a pseudo code below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;GREEDY-SET-COVER&lt;/strong&gt;(\(\mathcal{U}\), \(\mathcal{S}\), \(\mathrm{cost}\)):
    &lt;ul&gt;
      &lt;li&gt;\(\mathrm{COVERED} \leftarrow \Phi\) &lt;em&gt;// Elements covered so far.&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;\(\mathcal{C} \leftarrow \Phi\)&lt;/li&gt;
      &lt;li&gt;\(\mathrm{COST} \leftarrow 0\) &lt;em&gt;// Total cost so far.&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;WHILE&lt;/strong&gt; \({|\mathrm{COVERED}|} \lt {|\mathcal{U}|} \):
        &lt;ul&gt;
          &lt;li&gt;\(s \leftarrow \mathrm{argmin}_{s\in\mathcal{S}} { \frac{\mathrm{cost}{(s)}}{|{s - \mathrm{COVERED}}|} } \)&lt;/li&gt;
          &lt;li&gt;\(\mathrm{COVERED} \leftarrow \mathrm{COVERED} \cup s \)&lt;/li&gt;
          &lt;li&gt;\(\mathcal{C} \leftarrow \mathcal{C} \cup \{s\} \)&lt;/li&gt;
          &lt;li&gt;\(\mathrm{COST} \leftarrow \mathrm{COST} + \mathrm{cost}{(s)} \)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;RETURN&lt;/strong&gt; \(\mathrm{COST},\ \mathcal{C}\)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
  <entry>
    <title>Latin Square and Sudoku Solver Using SAT Solver (JavaScript logic-solver)</title>
    <link rel="alternate" href="http://shinaisan.github.io/2017/11/24/latin-square-and-sudoku-solver-using-sat-solver-javascript-logic-solver.html"/>
    <id>http://shinaisan.github.io/2017/11/24/latin-square-and-sudoku-solver-using-sat-solver-javascript-logic-solver.html</id>
    <published>2017-11-24T03:24:00Z</published>
    <updated>2017-11-26T16:18:57+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Latin squares and Sudoku programatically generated are show below.
These are screenshots of web apps created using JavaScript and a SAT solver library.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Example: Latin Squares &lt;sup id="fnref:latin-square-wikipedia"&gt;&lt;a href="#fn:latin-square-wikipedia" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; of size 5&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img alt="Latin Squares of size 5" src="../../../images/img-2017-11-24/SAT_logic-solver_Latin_Squares_5.png" /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Example: Sudoku &lt;sup id="fnref:sudoku-wikipedia"&gt;&lt;a href="#fn:sudoku-wikipedia" class="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img alt="Sudoku" src="../../../images/img-2017-11-24/SAT_logic-solver_Sudoku_small.png" /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;These problems can be expressed as
Boolean satisfiability problems (SAT) &lt;sup id="fnref:sat-wikipedia"&gt;&lt;a href="#fn:sat-wikipedia" class="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;
and solved using a SAT solver.&lt;/p&gt;

&lt;p&gt;I chose the 
&lt;a href="https://github.com/meteor/logic-solver"&gt;&lt;code&gt;logic-solver&lt;/code&gt;&lt;/a&gt;&lt;sup id="fnref:logic-solver-github"&gt;&lt;a href="#fn:logic-solver-github" class="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;
JavaScript library to solve Latin squares and Sudoku.
The central part of the program is listed below.
More details will follow later in this page.&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// solver: an instance of Logic.Solver where Logic is the logic-solver module.&lt;/span&gt;
&lt;span class="c1"&gt;// vars: a multi-dimensional (n x n x n) array of variable names.&lt;/span&gt;
&lt;span class="c1"&gt;// range: a utility function to make an array of integers from 1 to n.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;latinSquare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;solver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;solver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Logic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exactlyOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]))));&lt;/span&gt;
      &lt;span class="nx"&gt;solver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Logic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exactlyOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]))));&lt;/span&gt;
      &lt;span class="nx"&gt;solver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Logic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exactlyOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]))));&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sudoku&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;solver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;latinSquare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;solver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;solver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Logic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exactlyOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)][&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)][&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
          &lt;span class="p"&gt;))));&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="sample-apps"&gt;Sample Apps&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/shinaisan/sat-latin-square"&gt;sat-latin-square&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/shinaisan/sat-sudoku-solver"&gt;sat-sudoku-solver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="how-to-run-the-apps"&gt;How to Run the Apps&lt;/h3&gt;

&lt;p&gt;To run the apps, Node.js is required.
Each demo app runs as a server and can be launched as below:&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Correct the following placeholders REPO and THE_DIR_OF_CLONED_REPO.&lt;/span&gt;
git clone &lt;span class="nv"&gt;$REPO&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$THE_DIR_OF_CLONED_REPO&lt;/span&gt;
yarn install
yarn run start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The app can be accessed via a web browser. The default port is 3000.&lt;/p&gt;

&lt;p&gt;The Latin squares demo (&lt;code&gt;sat-latin-square&lt;/code&gt;) has a form to enter a problem size
(from 2 to 6).
It starts generating (reduced) Latin squares of given size upon submission of the form.
To avoid heavy computational load,
not all the solutions are shown.&lt;/p&gt;

&lt;p&gt;The Sudoku demo (&lt;code&gt;sat-sudoku-solver&lt;/code&gt;) has two grids.
A partial assignment can be specified on the left grid.
The solver starts upon pressing the Solve button
and shows a solution, if any, on the right grid.&lt;/p&gt;

&lt;h2 id="usage-of-logic-solver-in-the-apps"&gt;Usage of &lt;code&gt;logic-solver&lt;/code&gt; in the Apps&lt;/h2&gt;

&lt;p&gt;I use a variable &lt;code&gt;Logic&lt;/code&gt; to refer to the module &lt;code&gt;logic-solver&lt;/code&gt;.&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Logic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'logic-solver'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Before constructing logical constraints,
some utility functions are defined.
The &lt;code&gt;range&lt;/code&gt; function generates an array containing integers
ranging from zero to n-1.&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;genVars&lt;/code&gt; function generates variable names
each of which is indexed by a triple (r, c, s)
where r, c and s each indicates a row index, a column index
and a symbol respectively.
An index has the dimension of size x size x size.
A pair (r, c) specifies a cell in a Latin square.
Only one variable for each cell can have a true value.
A set of (r, c, s) triples for all the true variables
is the orthogonal array representation of a Latin square.&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;genVars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'_'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A Latin square is an n x n array filled with n different symbols.
The function latinSquare constructs a logical formula
expressing the conjunction of the following logical conditions&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Each symbol must occur exactly once in each column.&lt;/li&gt;
  &lt;li&gt;Each symbol must occur exactly once in each row.&lt;/li&gt;
  &lt;li&gt;Each cell of a square must have exactly one symbol.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;exactlyOne&lt;/code&gt; function returns an expression
requiring that only one of the variables given must be true 
and thus can be used to express each one of the above conditions.
The &lt;code&gt;require&lt;/code&gt; method is called
to instruct the solver that the given condition must be met
to satisfy the whole logical formula.&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// vars = genVars('v', n)&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;latinSquare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;solver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;solver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Logic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exactlyOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]))));&lt;/span&gt;
      &lt;span class="nx"&gt;solver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Logic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exactlyOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]))));&lt;/span&gt;
      &lt;span class="nx"&gt;solver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Logic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exactlyOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]))));&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, Sudoku is defined as a Latin square with
an additional &lt;em&gt;alldifferent&lt;/em&gt; constraint on each subgrid
that has the dimension m x m where m x m = n.&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sudoku&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;solver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;latinSquare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;solver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;solver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Logic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exactlyOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)][&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)][&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
          &lt;span class="p"&gt;))));&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running the (Sudoku) solver and obtaining a possible solution is as trivial as the following snippet:&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;solver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Logic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Solver&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;sudoku&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;solver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;genVars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'v'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;solution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;solver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If no solutions are found, &lt;code&gt;solution&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
Using this fact allows us to get all the possible solutions
by iterating the &lt;code&gt;solve()&lt;/code&gt; method until it returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An assignment that satisfies the constraints can be obtained
by using the &lt;code&gt;solution.getMap()&lt;/code&gt; method
that returns a dictionary object that maps
a variable name to its Boolean value assignment.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I am really impressed at how useful a SAT solver can be.
Latin squares (and Sudoku) seemed to me really complex at first
but can be expressed very concisely with &lt;code&gt;logic-solver&lt;/code&gt;.
I am wondering whether I want to further study this interesting technology
instead of just purposelessly producing toy programs like above.&lt;/p&gt;

&lt;h2 id="references"&gt;References&lt;/h2&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:latin-square-wikipedia"&gt;
      &lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Latin_square"&gt;Latin square&lt;/a&gt;&amp;nbsp;&lt;a href="#fnref:latin-square-wikipedia" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:sudoku-wikipedia"&gt;
      &lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Sudoku"&gt;Sudoku&lt;/a&gt;&amp;nbsp;&lt;a href="#fnref:sudoku-wikipedia" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:sat-wikipedia"&gt;
      &lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Boolean_satisfiability_problem"&gt;Boolean satisfiability problem - Wikipedia&lt;/a&gt;&amp;nbsp;&lt;a href="#fnref:sat-wikipedia" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:logic-solver-github"&gt;
      &lt;p&gt;&lt;a href="https://github.com/meteor/logic-solver"&gt;&lt;code&gt;logic-solver&lt;/code&gt;&lt;/a&gt;&amp;nbsp;&lt;a href="#fnref:logic-solver-github" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Making a Menger Sponge with BeetleBlocks</title>
    <link rel="alternate" href="http://shinaisan.github.io/2017/09/03/making-menger-sponge-with-beetleblocks.html"/>
    <id>http://shinaisan.github.io/2017/09/03/making-menger-sponge-with-beetleblocks.html</id>
    <published>2017-09-03T02:37:00Z</published>
    <updated>2017-09-03T20:24:10+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;My step by step process of making a Menger Sponge of level 3 using BeetleBlocks,
a visual programming environment for 3D design that everyone can enjoy via the Web browser:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="youtube-video"&gt;Youtube video&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=MYzE-etgeck" target="_blank"&gt;
&lt;img src="/images/img-2017-09-03/BB_R_Menger_L3.png" alt="Menger Sponge Level 3 with BeetleBlocks - YouTube" /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="process"&gt;Process&lt;/h2&gt;

&lt;p&gt;Repeatedly letting the beetle place a cube of unit length and move the same length forward makes a square bar.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Script for Bar" src="../../../images/img-2017-09-03/BB_S_Bar.png" /&gt;
&lt;img alt="Bar" src="../../../images/img-2017-09-03/BB_R_Bar.png" /&gt;&lt;/p&gt;

&lt;p&gt;It can trivially turn into a plate by nesting the bar making process within the outer &lt;code&gt;repeat&lt;/code&gt; with the y-coordinate shift (&lt;code&gt;change absolute y by 1&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img alt="Script for Plate" src="../../../images/img-2017-09-03/BB_S_Plate.png" /&gt;
&lt;img alt="Plate" src="../../../images/img-2017-09-03/BB_R_Plate.png" /&gt;&lt;/p&gt;

&lt;p&gt;Nesting once more in the same way produces a (bigger) cube.
Moving around a block of code without breaking its syntactic structure is where a visual programming language really shines.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Script for Cube" src="../../../images/img-2017-09-03/BB_S_Cube.png" /&gt;
&lt;img alt="Cube" src="../../../images/img-2017-09-03/BB_R_Cube.png" /&gt;&lt;/p&gt;

&lt;p&gt;Skipping a cube randomly still yields a cube but sponge look and feel emerge.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Script for Sponge" src="../../../images/img-2017-09-03/BB_S_Sponge.png" /&gt;
&lt;img alt="Cube" src="../../../images/img-2017-09-03/BB_R_Sponge.png" /&gt;&lt;/p&gt;

&lt;p&gt;Before attempting to turn it into a Menger sponge,
we wrap the conditional in a predicate named &lt;code&gt;menger&lt;/code&gt; as a preparation.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Script for Predicate" src="../../../images/img-2017-09-03/BB_S_Predicate.png" /&gt;&lt;/p&gt;

&lt;p&gt;Another preparation, the &lt;code&gt;floor&lt;/code&gt; reporter using &lt;code&gt;round&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Script for Floor" src="../../../images/img-2017-09-03/BB_S_Floor_Reporter.png" /&gt;&lt;/p&gt;

&lt;p&gt;Now the groundwork is done, we try implementing the Menger sponge of level 1 (&lt;code&gt;iteration = 1&lt;/code&gt;). The interface of the &lt;code&gt;menger&lt;/code&gt; predicate is tabulated below.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Input&lt;/th&gt;
      &lt;th&gt;Expected Actual Value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;x, y, z&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;The position of the beetle.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;iterations&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;The number of iterations (The level) of a Menger sponge.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;x1&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;The starting x-coordinate (inclusive) of the sponge.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;x2&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;The terminating x-coordinate (exclusive) of the sponge.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;y1&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;The starting y-coordinate (inclusive) of the sponge.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;y2&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;The terminating y-coordinate (exclusive) of the sponge.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;z1&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;The starting z-coordinate (inclusive) of the sponge.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;z2&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;The terminating z-coordinate (exclusive) of the sponge.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Output&lt;/th&gt;
      &lt;th&gt;Condition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;The given point lies in a cell constituting the sponge (not in a hole).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;The given point is in a hole of the sponge.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;A "hole" is made if two of the coordinates lie in middle thirds.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Script for Menger Sponge Level 1" src="../../../images/img-2017-09-03/BB_S_Menger_L1.png" /&gt;
&lt;img alt="Cube" src="../../../images/img-2017-09-03/BB_R_Menger_L1.png" /&gt;&lt;/p&gt;

&lt;p&gt;The final step is making the &lt;code&gt;menger&lt;/code&gt; predicate recursive.
The recursion terminates if the &lt;code&gt;iterations (level)&lt;/code&gt; equals to zero.
A level-0 Menger sponge is just a cube without any hole in it. Hence, the predicate returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Script for Recursion Termination" src="../../../images/img-2017-09-03/BB_S_Menger_Termination.png" /&gt;&lt;/p&gt;

&lt;p&gt;If the level is greater than zero, we recalculate the range of a sub-sponge and recurse down one level (&lt;code&gt;iterations - 1&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img alt="Script for Recursion" src="../../../images/img-2017-09-03/BB_S_Menger_Recursion.png" /&gt;&lt;/p&gt;

&lt;p&gt;Voila!&lt;/p&gt;

&lt;p&gt;&lt;img alt="Menger Sponge Level 3" src="../../../images/img-2017-09-03/BB_R_Menger_L3.png" /&gt;&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Making a Simple Image Viewer using React and Express</title>
    <link rel="alternate" href="http://shinaisan.github.io/2017/08/13/making-a-simple-image-viewer-using-react-and-express.html"/>
    <id>http://shinaisan.github.io/2017/08/13/making-a-simple-image-viewer-using-react-and-express.html</id>
    <published>2017-08-13T09:26:00Z</published>
    <updated>2017-08-24T22:48:20+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;A simple app written as my own hands-on exercise to get a quick grasp of React, Redux and react-router following some tutorial sites:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="the-repo"&gt;The Repo&lt;/h2&gt;

&lt;p&gt;The sources can be retrieved from &lt;a href="https://github.com/shinaisan/wikipedia-thumbnail-gallery"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="the-app"&gt;The App&lt;/h2&gt;

&lt;p&gt;The app has a navbar on top with a text box.
Wikipedia articles can be retrieved by typing in a keyword.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Top navbar" src="../../../images/img-2017-08-13/WTV_TopNavbar.png" /&gt;&lt;/p&gt;

&lt;p&gt;Upon completion of search, matching Wikipedia articles are listed in the center of the page. Some of the articles come with a corresponding thumbnail image.&lt;/p&gt;

&lt;p&gt;&lt;img alt="List of Matching Articles" src="../../../images/img-2017-08-13/WTV_Sample.png" /&gt;&lt;/p&gt;

&lt;p&gt;By clicking one of the thumbnails, a larger thumbnail is displayed in a modal window. This window can be closed by clicking anywhere on the page.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Modal Image View" src="../../../images/img-2017-08-13/WTV_Modal.png" /&gt;&lt;/p&gt;

&lt;h2 id="the-architecture"&gt;The Architecture&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;The client pushes the path &lt;code&gt;/search&lt;/code&gt; with a keyword parameter to the history stack.&lt;/li&gt;
  &lt;li&gt;The client mounts the &lt;code&gt;Gallery&lt;/code&gt; component for rendering search results. Upon mounting of this component, it calls the server API asynchronously and dispatches the &lt;code&gt;START_SEARCHING_FOR_KEYWORD&lt;/code&gt; action.&lt;/li&gt;
  &lt;li&gt;The server fetches Wikipedia article titles and thumbnail URLs via Mediawiki API.&lt;/li&gt;
  &lt;li&gt;The client dispatches the &lt;code&gt;RECEIVED_THUMBNAILS&lt;/code&gt; action upon a successful response from the server.&lt;/li&gt;
  &lt;li&gt;The client renders the search results.&lt;/li&gt;
  &lt;li&gt;The client renders a modal window to view a larger thumbnail when the user clicks on a smaller thumbanil.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img alt="Architecture" src="../../../images/img-2017-08-13/WTV_Architecture.png" /&gt;&lt;/p&gt;

&lt;h2 id="the-server"&gt;The Server&lt;/h2&gt;

&lt;h3 id="defining-the-api"&gt;Defining the API&lt;/h3&gt;

&lt;p&gt;The server uses Express.
It has only one route &lt;code&gt;/api/search&lt;/code&gt; which is defined as below.&lt;/p&gt;

&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Excerpt from ./server/app.js&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/api/search'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;wikipedia&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetchTitlesAndThumbnails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Defined in ./server/wikipedia.js&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="the-mediawiki-api"&gt;The Mediawiki API&lt;/h3&gt;

&lt;p&gt;The server uses two Mediawiki APIs; &lt;code&gt;opensearch&lt;/code&gt; and &lt;code&gt;query(pageimages)&lt;/code&gt;.
The file &lt;code&gt;./server/wikipedia.js&lt;/code&gt; wraps calls to these external APIs.&lt;/p&gt;

&lt;h4 id="example-mediawiki-queries"&gt;Example Mediawiki Queries&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://en.wikipedia.org/w/api.php?action=opensearch&amp;amp;format=json&amp;amp;search=wiki"&gt;opensearch "wiki"&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://en.wikipedia.org/w/api.php?action=query&amp;amp;prop=pageimages&amp;amp;pithumbsize=100&amp;amp;format=json&amp;amp;titles=Wikipedia"&gt;pageimages query for "Wikipedia"&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="the-client"&gt;The Client&lt;/h2&gt;

&lt;h3 id="the-search-input-box"&gt;The Search Input Box&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;TopNavbar&lt;/code&gt; React component has the &lt;code&gt;history&lt;/code&gt; prop passed by &lt;code&gt;BrowserRouter&lt;/code&gt;.
In the submit event handler, the successive path &lt;code&gt;/search&lt;/code&gt; is pushed to the &lt;code&gt;history&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id="the-routes"&gt;The Routes&lt;/h3&gt;

&lt;p&gt;The home route &lt;code&gt;/&lt;/code&gt; in this app navigates to the &lt;code&gt;Home&lt;/code&gt; component that is just a placeholder containing only a link to an example thumbnail query.&lt;/p&gt;

&lt;p&gt;The path &lt;code&gt;/search&lt;/code&gt; navigates to the &lt;code&gt;Gallery&lt;/code&gt; component for displaying a list of articles and thumbnails retrieved by the server.&lt;/p&gt;

&lt;pre class="highlight xml"&gt;&lt;code&gt;        &lt;span class="nt"&gt;&amp;lt;Switch&lt;/span&gt; &lt;span class="na"&gt;location=&lt;/span&gt;&lt;span class="s"&gt;{isModal&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="err"&gt;this.previousLocation&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;location}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;Route&lt;/span&gt; &lt;span class="err"&gt;exact&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt; &lt;span class="na"&gt;component=&lt;/span&gt;&lt;span class="s"&gt;{Home}/&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;Route&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;'/search'&lt;/span&gt; &lt;span class="na"&gt;component=&lt;/span&gt;&lt;span class="s"&gt;{Gallery}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/Switch&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="modal-implementation-with-react-router"&gt;Modal Implementation with React-Router&lt;/h3&gt;

&lt;p&gt;The implementation of modal window apparently mimics the "Modal Gallery" example of &lt;a href="https://reacttraining.com/react-router/web/example/modal-gallery"&gt;React Training / React Router&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Below is an excerpt from the client source.
The &lt;code&gt;location.state&lt;/code&gt; object is defined when a smaller thumbnail is clicked.
If the &lt;code&gt;isModal&lt;/code&gt; flag is set, the &lt;code&gt;Switch&lt;/code&gt; route is rendered according to the previous location (&lt;code&gt;this.previousLocation&lt;/code&gt;).
And the &lt;code&gt;Modal&lt;/code&gt; component is placed on top of the previous rendering.&lt;/p&gt;

&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isModal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;previousLocation&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="c1"&gt;// not initial render&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt; &lt;span class="na"&gt;location=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isModal&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;previousLocation&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="nt"&gt;exact&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt; &lt;span class="na"&gt;component=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s1"&gt;'/search'&lt;/span&gt; &lt;span class="na"&gt;component=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Gallery&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;isModal&lt;/span&gt;
          &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s1"&gt;'/img'&lt;/span&gt; &lt;span class="na"&gt;component=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Modal&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
        &lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="the-api-invocation-and-the-state-transition"&gt;The API Invocation and the State Transition&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Gallery&lt;/code&gt; component calls its &lt;code&gt;fetchThumbnails&lt;/code&gt; method when it is mounted or its props are to be updated.&lt;/p&gt;

&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Gallery&lt;/span&gt; &lt;span class="kr"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fetchThumbnails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'fetchThumbnails'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'START_SEARCHING_FOR_KEYWORD'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/api/search'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"fetchThumbnails result"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'RECEIVED_THUMBNAILS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;thumbnails&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Error in fetchThumbnails"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'ERROR_IN_API'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queryString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetchThumbnails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This method invokes the server API. The API is called using &lt;code&gt;axios.get&lt;/code&gt;.
It dispatches the following Redux actions during the asynchronous run.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Start of search:&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'START_SEARCHING_FOR_KEYWORD'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="cm"&gt;/* keyword from user */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Completion of search:&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'RECEIVED_THUMBNAILS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cm"&gt;/* keyword from user */&lt;/span&gt;
  &lt;span class="nx"&gt;thumbnails&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="cm"&gt;/* result of the API */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Error:&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'ERROR_IN_API'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cm"&gt;/* keyword from user */&lt;/span&gt;
  &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="cm"&gt;/* the error caught during axios.get */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="the-reducer-for-redux-store"&gt;The Reducer for Redux Store&lt;/h3&gt;

&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;INITIAL_STATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;thumbnails&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;INITIAL_STATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'START_SEARCHING_FOR_KEYWORD'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;thumbnails&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'RECEIVED_THUMBNAILS'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;thumbnails&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;thumbnails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'ERROR_IN_API'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;thumbnails&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="testing-both-the-webpack-dev-server-of-create-react-app-and-express-api-server"&gt;Testing Both the Webpack Dev Server of create-react-app and Express API Server&lt;/h2&gt;

&lt;p&gt;The client is made with &lt;code&gt;create-react-app&lt;/code&gt; so the Webpack Dev Server is used when testing on the development version of the app.
Getting this server to work with the Express API server requires additional configurations below.&lt;/p&gt;

&lt;p&gt;This article helped me a lot:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/"&gt;Fullstack React: How to get "create-react-app" to work with your API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following command is designated in &lt;code&gt;package.json&lt;/code&gt; as one of &lt;code&gt;scripts&lt;/code&gt; to start the two servers &lt;code&gt;concurrently&lt;/code&gt;.&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="s2"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"concurrently \"node server\" \"react-scripts start\""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The actual command by &lt;code&gt;yarn run start&lt;/code&gt;:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;concurrently "node server" "react-scripts start"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Webpack dev server call the Express API via the proxy defined in the &lt;code&gt;package.json&lt;/code&gt; like below:&lt;/p&gt;

&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;"proxy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"/api"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"target"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://localhost:7070"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we are running the servers on a remote host (such as EC2 instance) instead of localhost, its host name must be specified to the &lt;code&gt;HOST&lt;/code&gt; variable in the &lt;code&gt;.env.development&lt;/code&gt; file:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;HOST=ec2-xxx.compute.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://reacttraining.com/react-router/web/example/modal-gallery"&gt;React Training / React Router&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/"&gt;Fullstack React: How to get "create-react-app" to work with your API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
  <entry>
    <title>Cytoscape.js powered Interactive Graph Visualization of WordNet Synsets</title>
    <link rel="alternate" href="http://shinaisan.github.io/2017/05/06/cytoscape-js-powered-interactive-graph-visualization-of-wordnet-synsets.html"/>
    <id>http://shinaisan.github.io/2017/05/06/cytoscape-js-powered-interactive-graph-visualization-of-wordnet-synsets.html</id>
    <published>2017-05-06T00:30:00Z</published>
    <updated>2017-05-08T21:14:05+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Cytoscape.js is a JavaScript library for graph visualization that enables rendering network structures on a web browser.
The official site has some demonstrations that show its capabilities.
I was fascinated and started playing with its easy-to-use API.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Also, I was interested in WordNet, which has nothing to do with Cytoscape.js, and wanted a tool for it. WordNet is a large lexical database that groups synonymous words into an unordered set called "synset" and contains relations among synsets.
Out of curiosity, I wrote some queries to examine what is inside the Japanese WordNet database.
Then, I tried visualizing the results with Cytoscape.js.
Finally, I ended up building the following simple web app.&lt;/p&gt;

&lt;h2 id="the-web-app"&gt;The Web App&lt;/h2&gt;

&lt;p&gt;&lt;a target="_blank" href="https://wordnet-viewer.herokuapp.com/"&gt;WordNet Viewer&lt;/a&gt;
(Heads up! This site is a little energy consuming. Do not visit when the battery is running low:)&lt;/p&gt;

&lt;p&gt;&lt;img alt="WordNet Viewer" src="../../../images/img-2017-04-22/WNV_Hello_en.png" /&gt;&lt;/p&gt;

&lt;h3 id="graph-rendering"&gt;Graph Rendering&lt;/h3&gt;

&lt;p&gt;A graph is displayed at the center of the page.&lt;/p&gt;

&lt;p&gt;Each vertex of the graph represents a synset and each edge represents relationship between two synsets. The node at the tip of an arrow is a synset of the hypernym (in most cases) of the synset at the origin.
(Some arrows represent other relationships such as membership relation but the app does not make clear distinction among them.)&lt;/p&gt;

&lt;p&gt;Nodes and edges can be moved around by dragging.
And the viewport can be panned and zoomed by dragging the background and using mouse wheel.&lt;/p&gt;

&lt;h3 id="entering-a-word"&gt;Entering a Word&lt;/h3&gt;

&lt;p&gt;Typing a word in the text box at the topmost navbar and hitting Go button causes the app to look up the synset containing the word entered. If a synset is found, the app visualizes the network involves it.&lt;/p&gt;

&lt;p&gt;The following example is a graph rendered for a word "programmer:"&lt;/p&gt;

&lt;p&gt;&lt;img alt="Programmer" src="../../../images/img-2017-04-22/WNV_Viz_Synset_Programmer_en.png" /&gt;&lt;/p&gt;

&lt;h3 id="details-of-a-synset"&gt;Details of a synset&lt;/h3&gt;

&lt;p&gt;Clicking a node causes the app to change the layout of the graph to show all the words in the synset of the clicked node.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Words" src="../../../images/img-2017-04-22/WNV_Viz_Words.png" /&gt;&lt;/p&gt;

&lt;h3 id="search-buttons"&gt;Search Buttons&lt;/h3&gt;

&lt;p&gt;Each word in a synset can be clicked to show a tooltip carrying some buttons. One of them navigates you to Google for instance.&lt;/p&gt;

&lt;p&gt;&lt;img alt="qtip" src="../../../images/img-2017-04-22/WNV_qtip.png" /&gt;&lt;/p&gt;

&lt;p&gt;The cytoscape-qtip plugin is used to enable this.&lt;/p&gt;

&lt;h2 id="implementation-details"&gt;Implementation Details&lt;/h2&gt;

&lt;p&gt;The web app is made up of the tree parts below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Synset look up in the WordNet SQLite database using &lt;code&gt;sequel&lt;/code&gt; Ruby Gem.&lt;/li&gt;
  &lt;li&gt;Sinatra routes to invoke SQL queries.&lt;/li&gt;
  &lt;li&gt;Frontend script using Cytoscape.js to visualize the graph returned from Sinatra server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="cytoscapejs"&gt;Cytoscape.js&lt;/h3&gt;

&lt;p&gt;The advantage of using &lt;a href="http://js.cytoscape.org/"&gt;Cytoscape.js&lt;/a&gt; is not only rendering of graphs
but also builtin support for standard gestures to pan and zoom the viewport and many many others.
Once we have graph data in a format taylored to Cytoscape.js, we are ready to enjoy the features provided by the library.&lt;/p&gt;

&lt;p&gt;Below are very short excerpts (modified and simplified) from the code in the app.&lt;/p&gt;

&lt;h4 id="initialization"&gt;Initialization&lt;/h4&gt;

&lt;p&gt;A sample code snippet for initializing visualization of a given &lt;code&gt;graph&lt;/code&gt;:&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cytoscape&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="c1"&gt;// Initialization of Cytoscape core object.&lt;/span&gt;
  &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'cy'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;// A DOM element to contain a graph rendering.&lt;/span&gt;
  &lt;span class="na"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// A graph data in JSON.&lt;/span&gt;
  &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'node'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'data(label)'&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id="selector"&gt;Selector&lt;/h5&gt;

&lt;p&gt;A CSS-like selector for &lt;code&gt;selector&lt;/code&gt; specifies elements in a given graph.
Some examples of selector:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;selector&lt;/th&gt;
      &lt;th&gt;objects selected&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;node&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;All nodes.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;edge&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;All edges.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;#foo&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;A graph element &lt;code&gt;ele&lt;/code&gt; where &lt;code&gt;ele.data.id&lt;/code&gt; is &lt;code&gt;"foo"&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.foo&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;A graph element classed &lt;code&gt;foo&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;[some_parameter = "some value"]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Graph elements &lt;code&gt;ele&lt;/code&gt; where &lt;code&gt;ele.data.some_parameter&lt;/code&gt; is &lt;code&gt;"some value"&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;[?some_parameter]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Graph elements &lt;code&gt;ele&lt;/code&gt; where &lt;code&gt;ele.data.some_parameter&lt;/code&gt; is a truthy value.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;:visible&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Visible graph elements.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id="labels"&gt;Labels&lt;/h5&gt;

&lt;p&gt;In the above example, &lt;code&gt;data(label)&lt;/code&gt; is specified to show &lt;code&gt;ele.data.label&lt;/code&gt; as a label for an element &lt;code&gt;ele&lt;/code&gt; selected by the &lt;code&gt;selector&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id="graph-data"&gt;Graph Data&lt;/h4&gt;

&lt;p&gt;A sample graph data consisting of two vertices and an edge connecting them
(from &lt;code&gt;source&lt;/code&gt; to &lt;code&gt;target&lt;/code&gt;):&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;// Two vertices&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"nodes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"node1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"label for node1"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"nodes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"node2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"label for node2"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;// An edge from "node1" to "node2"&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"edges"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"node1-to-node2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"node1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"node2"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="analysis"&gt;Analysis&lt;/h4&gt;

&lt;p&gt;An example use of &lt;code&gt;dijkstra&lt;/code&gt; where the distance from the node with truthy &lt;code&gt;data.start&lt;/code&gt; to the given node &lt;code&gt;n&lt;/code&gt; is calculated:&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;dijkstra&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;dijkstra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'[?start]'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;dist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dijkstra&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;distanceTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="style-and-layout"&gt;Style and Layout&lt;/h4&gt;

&lt;p&gt;A style sample where a mapper &lt;code&gt;mapData&lt;/code&gt; is used to linearly change the width of a node according to its &lt;code&gt;data.weight&lt;/code&gt; value:&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'node'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="s1"&gt;'shape'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'circle'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s1"&gt;'width'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'mapData(weight, 0, 10, 20, 60)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s1"&gt;'label'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'data(label)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example use of the concentric layout to position nodes so that they are centered around some node:&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'concentric'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;concentric&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dijkstra&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;distanceTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;levelWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The positions of nodes are determined by the &lt;code&gt;concentric&lt;/code&gt; function. The higher the return value of the function applied to a node, the nearer the center it is placed.&lt;/p&gt;

&lt;h3 id="querying-wordnet-database-with-ruby"&gt;Querying WordNet Database with Ruby&lt;/h3&gt;

&lt;p&gt;The graph data is constructed by firstly querying SQLite 3 database of
&lt;a href="http://compling.hss.ntu.edu.sg/wnja/"&gt;Japanese WordNet&lt;/a&gt;
and secondly formatting the retrieved results for Cytoscape.js.&lt;/p&gt;

&lt;h4 id="sequel"&gt;Sequel&lt;/h4&gt;

&lt;p&gt;There is a Ruby Gem &lt;code&gt;wordnet&lt;/code&gt; but we cannot use it for Japanese WordNet
because its schema seems to be different from English WordNet.&lt;/p&gt;

&lt;p&gt;Anyway, we can query the database directly.
The &lt;code&gt;sequel&lt;/code&gt; gem is quite handy for such tasks because
we can construct SQL queries by chaining methods as is often done in Ruby.&lt;/p&gt;

&lt;p&gt;A sample code for assigning a new Sequel instance to an instance variable &lt;code&gt;@db&lt;/code&gt; of some (arbitrary) class based on the SQLite 3 database file &lt;code&gt;./wnjpn.sqlite3&lt;/code&gt;:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'sequel'&lt;/span&gt;
&lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="vi"&gt;@db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Sequel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sqlite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'./wnjpn.sqlite3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="synset-look-up-from-word"&gt;Synset Look Up from Word&lt;/h4&gt;

&lt;p&gt;To look up synsets from a given word lemma &lt;code&gt;lemma&lt;/code&gt;,
we specify the &lt;code&gt;word&lt;/code&gt; table (&lt;code&gt;@db[:word]&lt;/code&gt;), join the &lt;code&gt;sense&lt;/code&gt; table,
and select columns of interest.&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_word_synsets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lemma&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:word&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:lemma&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;lemma&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;senses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:sense&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:wordid&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:wordid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;senses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:synset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Sequel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;qualify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:lang&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="no"&gt;Sequel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;qualify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:lemma&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Sequel.qualify(:word, :lemma)&lt;/code&gt; can be written also as &lt;code&gt;Sequel[:word][:lemma]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The corresponding SQL query is as follows:&lt;/p&gt;

&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="nv"&gt;"synset"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"word"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;"lang"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"word"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;"lemma"&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="nv"&gt;"word"&lt;/span&gt;
  &lt;span class="k"&gt;INNER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="nv"&gt;"sense"&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;"sense"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;"wordid"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;"word"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;"wordid"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;"lemma"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lemma&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="finding-hypernyms"&gt;Finding Hypernyms&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;synlink&lt;/code&gt; table (&lt;code&gt;@db[:synlink]&lt;/code&gt;) has pairs of &lt;code&gt;(synset1, synset2)&lt;/code&gt; each of which has a type &lt;code&gt;link&lt;/code&gt;. We want pairs of &lt;code&gt;link&lt;/code&gt; type &lt;code&gt;hype&lt;/code&gt;. Straightforward in Sequel:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;synset_to_hypernyms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;synset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:synlink&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:synset1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;synset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;link: &lt;/span&gt;&lt;span class="s1"&gt;'hype'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:synset1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:synset2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The corresponding SQL query is as follows:&lt;/p&gt;

&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="nv"&gt;"synset1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"synset2"&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="nv"&gt;"synlink"&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;"synset1"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;synset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;"link"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;"hype"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://js.cytoscape.org/"&gt;Cytoscape.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Franz M, Lopes CT, Huck G, Dong Y, Sumer O, Bader GD&lt;br /&gt;
Cytoscape.js: a graph theory library for visualisation and analysis&lt;br /&gt;
&lt;a href="http://bioinformatics.oxfordjournals.org/content/32/2/309"&gt;Bioinformatics (2016) 32 (2): 309-311 first published online September 28, 2015 doi:10.1093/bioinformatics/btv557&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/jeremyevans/sequel"&gt;jeremyevans/sequel: Sequel: The Database Toolkit for Ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
</feed>
